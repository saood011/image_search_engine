{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","term","setTerm","pictures","setPictures","pageNum","setPageNum","changePage","e","axios","get","params","query","page","per_page","headers","Authorization","then","response","data","results","console","log","catch","error","message","className","onSubmit","preventDefault","type","onChange","target","value","placeholder","length","map","pic","key","id","href","urls","full","src","thumb","alt","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAoHeA,MAhHf,WAAgB,IAAD,EACWC,mBAAS,OADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGiBJ,mBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAiCPC,EAAa,SAAAC,GACjBC,IACGC,IAAI,yCAA0C,CAC7CC,OAAQ,CACNC,MAAOX,EACPY,KAAMR,EACNS,SAAU,IAEZC,QAAS,CACPC,cACE,gFAGLC,MAAK,SAAAC,GACJd,EAAY,YAAIc,EAASC,KAAKC,UAC9BC,QAAQC,IAAIJ,EAASC,KAAKC,YAE3BG,OAAM,SAAAC,GACLH,QAAQC,IAAIE,EAAMC,aAIxB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,UACf,0BAAMC,SAhDU,SAAAnB,GAClBA,EAAEoB,iBACFnB,IACGC,IAAI,yCAA0C,CAC7CC,OAAQ,CACNC,MAAOX,EACPY,KAAM,EACNC,SAAU,IAEZC,QAAS,CACPC,cACE,gFAGLC,MAAK,SAAAC,GACJd,EAAY,YAAIc,EAASC,KAAKC,UAC9BC,QAAQC,IAAIJ,EAASC,KAAKC,YAE3BG,OAAM,SAAAC,GACLH,QAAQC,IAAIE,EAAMC,aA6BSC,UAAU,kCACrC,2BACEG,KAAK,OACLC,SAxDc,SAAAtB,GACpBN,EAAQM,EAAEuB,OAAOC,OACjBX,QAAQC,IAAIrB,IAuDNyB,UAAU,eACVO,YAAY,sCAEd,2BAAOJ,KAAK,SAASG,MAAM,SAASN,UAAU,0BAGhD,yBAAKA,UAAU,wEACZvB,EAAS+B,OACR/B,EAASgC,KAAI,SAAAC,GAAG,OACd,yBAAKV,UAAU,sBAAsBW,IAAKD,EAAIE,IAC5C,uBAAGC,KAAMH,EAAII,KAAKC,KAAMV,OAAO,SAC5B,IACD,yBACEW,IAAKN,EAAII,KAAKG,MACdjB,UAAU,eACVkB,IAAKR,EAAIE,UAMjB,wBAAIZ,UAAU,aAAd,0BAGJ,yBAAKA,UAAU,kCACb,4BACEA,UAAU,iBACVmB,QAAS,WACPvC,EAAWD,EAAU,GACrBgB,QAAQC,IAAIjB,GACZE,MALJ,YAUA,4BACEmB,UAAU,iBACVmB,QAAS,WACPvC,EAAWD,EAAU,GACrBgB,QAAQC,IAAIjB,GACZE,MALJ,WCzFYuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,MAAK,SAAAyC,GACjCA,EAAaC,kB","file":"static/js/main.080b7b7e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nfunction App() {\n  const [term, setTerm] = useState(\"car\");\n  const [pictures, setPictures] = useState([]);\n  const [pageNum, setPageNum] = useState(1);\n\n  const changeHandler = e => {\n    setTerm(e.target.value);\n    console.log(term);\n  };\n\n  const sendRequest = e => {\n    e.preventDefault();\n    axios\n      .get(\"https://api.unsplash.com/search/photos\", {\n        params: {\n          query: term,\n          page: 1,\n          per_page: 15\n        },\n        headers: {\n          Authorization:\n            \"Client-ID 89a74f8c26da940b295f7c22ccaf83e3404ac033065c8db15fcbbc3b0639a400\"\n        }\n      })\n      .then(response => {\n        setPictures([...response.data.results]);\n        console.log(response.data.results);\n      })\n      .catch(error => {\n        console.log(error.message);\n      });\n  };\n\n  const changePage = e => {\n    axios\n      .get(\"https://api.unsplash.com/search/photos\", {\n        params: {\n          query: term,\n          page: pageNum,\n          per_page: 15\n        },\n        headers: {\n          Authorization:\n            \"Client-ID 89a74f8c26da940b295f7c22ccaf83e3404ac033065c8db15fcbbc3b0639a400\"\n        }\n      })\n      .then(response => {\n        setPictures([...response.data.results]);\n        console.log(response.data.results);\n      })\n      .catch(error => {\n        console.log(error.message);\n      });\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"cover\"></div>\n      <form onSubmit={sendRequest} className=\"text-center d-flex mt-2 shadow\">\n        <input\n          type=\"text\"\n          onChange={changeHandler}\n          className=\"form-control\"\n          placeholder=\" Enter the name of the picture...\"\n        />\n        <input type=\"submit\" value=\"Search\" className=\"btn btn-primary ml-1\" />\n      </form>\n\n      <div className=\"d-flex flex-wrap justify-content-center mt-2 list align-items-center\">\n        {pictures.length ? (\n          pictures.map(pic => (\n            <div className=\"card m-2 p-2 shadow\" key={pic.id}>\n              <a href={pic.urls.full} target=\"blank\">\n                {\" \"}\n                <img\n                  src={pic.urls.thumb}\n                  className=\"card-img-top\"\n                  alt={pic.id}\n                />\n              </a>\n            </div>\n          ))\n        ) : (\n          <h3 className=\"text-dark\">Search result here...</h3>\n        )}\n      </div>\n      <div className=\"d-flex justify-content-between\">\n        <button\n          className=\"btn btn-danger\"\n          onClick={() => {\n            setPageNum(pageNum - 1);\n            console.log(pageNum);\n            changePage();\n          }}\n        >\n          previous\n        </button>\n        <button\n          className=\"btn btn-danger\"\n          onClick={() => {\n            setPageNum(pageNum + 1);\n            console.log(pageNum);\n            changePage();\n          }}\n        >\n          next\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}